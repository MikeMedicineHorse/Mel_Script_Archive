/**********************************************************************************************
Procedure: setupFrontDOFlayer()
Date: 05-06-09
Description: This procedure will setup the front DOF layer
**********************************************************************************************/

global proc mh_factorFrontDOFlayer()
{
	//error checking for dof planes
	if (`objExists targetDOFPlane_anim` || `objExists targetDOFPlane`){
		print "DOF planes detected" ;
	}else{
		error "Pease select a camera and run the DOF plane script first" ;
	}

	//store the user selection to restore later
	string $userSelection[] = `ls -sl`;
	
	//store all the cameras--can't remember why
	string $allCameras[] = `ls -ca`;
	
	//V2.0 Edit
	//Retain current layer for animator
	//string $userCurrentLayer = `editRenderLayerGlobals -q -currentRenderLayer`;
	//V2.0 end

	string $frontDofLayer = "defaultRenderLayer" ;
	
	//create front DOF render layer 	
	//if (`objExists FrontDOF`){
	//	error "FrontDOF layer already exists.\r";
	//}else{
		//create layer with -global flag which adds all objects--even future ones
		//$frontDofLayer = `createRenderLayer -g -n FrontDOF` ;
		
		//Turn on render all layers from the layering menu
		//optionVar -intValue renderViewRenderAllLayers 1;
	
		//Turn renderlayer options to "keep layers"
		//optionVar -intValue renderViewRenderLayersMode 2;
		
		//add the reardof render name as an override
		//editRenderLayerGlobals -currentRenderLayer $frontDofLayer ;
		//editRenderLayerAdjustment "defaultRenderGlobals.imageFilePrefix";
		//setAttr -type "string" defaultRenderGlobals.imageFilePrefix "FrontDOF";
		
		/*apply the maya software renderer as an overide
		editRenderLayerAdjustment "defaultRenderGlobals.currentRenderer";
		string $renderer = "mayaSoftware" ;
		setAttr "defaultRenderGlobals.currentRenderer" -type "string" $renderer ;
		
		//turn on High Quality
		setAttr defaultRenderQuality.edgeAntiAliasing 1;
		
		//set filter to Gaussian and widthXY to 3
		setAttr "defaultRenderQuality.pixelFilterType" 4;
		setAttr "defaultRenderQuality.pixelFilterWidthX" 3;
		setAttr "defaultRenderQuality.pixelFilterWidthY" 3;
		
		//apply production quality settings
		setAttr "defaultRenderQuality.shadingSamples" 2;
		setAttr "defaultRenderQuality.maxShadingSamples" 8;
		setAttr "defaultRenderQuality.redThreshold" 0.4;
		setAttr "defaultRenderQuality.greenThreshold" 0.3;
		setAttr "defaultRenderQuality.blueThreshold" 0.6;
		*/
		//V2.0 EDIT here
		for ($i = 0; $i < size ($allCameras); $i++){
			//editRenderLayerAdjustment ($allCameras[$i] + ".backgroundColor");
			setAttr ($allCameras[$i] + ".backgroundColor") -type double3 0 0 0 ;
			}		
		//END V2.0 EDIT
	//}
	
	//create frontDof shading network 
	$frontdofSampler = `createNode samplerInfo -n frontDOF_samplerinfo_00` ;
	
	$frontdofMultiply = `createNode multiplyDivide -n frontDOF_multiplyDivide_00` ;
	setAttr ($frontdofMultiply + ".input2X") -1 ;
	
	$frontdofRange = `createNode setRange -n frontDOF_setRange` ;
	setAttr ($frontdofRange + ".minX") 1 ;
	
	$frontdofNMultiply = `createNode multiplyDivide -n frontDOF_NmultiplyDivide_00` ;
	setAttr ($frontdofNMultiply + ".input2X") -1 ;
	
	$ftargetMultiply = `createNode multiplyDivide -n ftargetDOF_multiplyDivide_00` ;
	setAttr ($ftargetMultiply + ".input2X") -1 ;
	
	print "\nFrontDOF nodes created successfully.\r";	
	
	//create frontDOF shader
	$frontdofShader = `shadingNode -asShader surfaceShader -n frontDOF_surfaceShader_00` ;
	$frontdofSG = `sets -renderable true -noSurfaceShader true -empty -name ($frontdofShader + "_SG")` ;
	connectAttr -f ($frontdofShader + ".outColor") ($frontdofSG + ".surfaceShader") ;
	print "FrontDOF_surfaceShader created successfully.\r";
		
	//make node connections regardless of dof planes		
	connectAttr -f ($frontdofNMultiply + ".outputX") ($frontdofRange + ".oldMaxX") ;
	connectAttr -f ($ftargetMultiply + ".outputX") ($frontdofRange + ".oldMinX") ;
	connectAttr -f ($frontdofSampler + ".pointCameraZ") ($frontdofMultiply + ".input1X") ;
	connectAttr -f ($frontdofMultiply + ".outputX") ($frontdofRange + ".valueX") ;
	connectAttr -f ($frontdofRange + ".outValueX") ($frontdofShader + ".outColorB") ;
	connectAttr -f ($frontdofRange + ".outValueX") ($frontdofShader + ".outColorG") ;
	connectAttr -f ($frontdofRange + ".outValueX") ($frontdofShader + ".outColorR") ;
	
	//hook up dof planes for renderin	
	if (`objExists targetDOFPlane_anim` && `objExists frontDOFPlane_anim` && `objExists $frontdofMultiply`){
		if (`isConnected targetDOFPlane_anim.tz ($frontdofMultiply + ".input1X")`){
			print "Front DOF script has already been executed once.\r";
		}else{
		
			connectAttr -f targetDOFPlane_anim.tz ($frontdofNMultiply + ".input1X") ;
			
			connectAttr -f frontDOFPlane_anim.tz ($ftargetMultiply + ".input1X") ;
		}
	}else{
		print "No normal DOF planes detected please run jh_buildNormalDOF.mel.\r";	
	}
		
	if (`objExists targetDOFPlane` && `objExists frontDOFPlane` && `objExists $frontdofNMultiply`){
		if (`isConnected targetDOFPlane.tz ($frontdofNMultiply + ".input1X")`){
			print "Front DOF script has already been executed once.\r";
		}else{
			
			connectAttr -f targetDOFPlane.tz ($frontdofNMultiply + ".input1X");
			
			connectAttr -f frontDOFPlane.tz ($ftargetMultiply + ".input1X") ;
		}
		
	}else{
		print "Targeted planes do not exist please run jh_buildTargetedDOF.mel\r";
		
	}

	//set AA and/or create mentalRayGlobals if not already created
	if (`objExists mentalrayGlobals`){		
		//editRenderLayerAdjustment "miDefaultOptions.finalGather" ;
		setAttr "miDefaultOptions.finalGather" 0 ;
				
		//turn on raytracing as overide so AO calculates
		//editRenderLayerAdjustment "miDefaultOptions.rayTracing";
		setAttr "miDefaultOptions.rayTracing" 1;
					
		//editRenderLayerAdjustment "miDefaultOptions.minSamples";
		setAttr "miDefaultOptions.minSamples" 0;
					
		//editRenderLayerAdjustment "miDefaultOptions.maxSamples";
		setAttr "miDefaultOptions.maxSamples" 2;
			
		//editRenderLayerAdjustment "miDefaultOptions.filter";
		setAttr miDefaultOptions.filter 3;
			
		setAttr "miDefaultOptions.jitter" 1;	
	}else{
		
		unifiedRenderGlobalsWindow;
		
	
		if ( `window -exists unifiedRenderGlobalsWindow` && `window -query -visible unifiedRenderGlobalsWindow` ){
			   print "globals window open\n" ; 
		   }else{
			   error "Please open the render globals window first\n"; 
		   }

		//initialize the mental ray variables
		string $tabLayoutName = "mentalRayTabLayout" ;
		string $qualityTab = "mentalRayQualityTab" ;
		int $selectedTab = `tabLayout -q -sti $tabLayoutName`;
		string $tabNames[] = `tabLayout -q -ca $tabLayoutName`;
		int $targetTab ;

		//grab the current tab for user replace later
		int $currentIndex = `tabLayout -q -sti $tabLayoutName`;
		
		//set Mental Ray as primary renderer
		string $renderercurrent = `getAttr defaultRenderGlobals.currentRenderer` ;
		string $mentalRay = "mentalRay" ;
		if ($renderercurrent != $mentalRay)
		{
			setAttr "defaultRenderGlobals.currentRenderer" -type "string" $mentalRay ;
		}

		//Mental ray quality tab grabber 2010
		for ($i = 0; $i < size ($tabNames); $i++){
			if ($tabNames[$i] == $qualityTab){
				$targetTab = $i ;
				}
		}	

		if (`objExists mentalrayGlobals`){
			print "mentalRay globals exist" ;
		}else{
			//hack to switch render globals frame to the quality tab forcing the MR nodes to be built
			tabLayout -e -sti $targetTab $tabLayoutName;
		}

		//set the AA settings are nodes are created
		//editRenderLayerAdjustment "miDefaultOptions.finalGather" ;
		setAttr "miDefaultOptions.finalGather" 0 ;
				
		//turn on raytracing as overide so AO calculates
		//editRenderLayerAdjustment "miDefaultOptions.rayTracing";
		setAttr "miDefaultOptions.rayTracing" 1;
					
		//editRenderLayerAdjustment "miDefaultOptions.minSamples";
		setAttr "miDefaultOptions.minSamples" 0;
					
		//editRenderLayerAdjustment "miDefaultOptions.maxSamples";
		setAttr "miDefaultOptions.maxSamples" 2;
			
		//editRenderLayerAdjustment "miDefaultOptions.filter";
		setAttr miDefaultOptions.filter 3;
			
		setAttr "miDefaultOptions.jitter" 1;
		
		//close da window
		window -e -vis 0 unifiedRenderGlobalsWindow;

	}
		
	/* below is the mental ray settings for dof rendering-we run software now...
	//turn off raytracing as overide which will turn off area shadows
	//editRenderLayerAdjustment "miDefaultOptions.rayTracing";
	//setAttr "miDefaultOptions.rayTracing" 0;
				
	//make sure primary renderer is scanline as override
	//editRenderLayerAdjustment "miDefaultOptions.scanline";
	//setAttr "miDefaultOptions.scanline" 1;
				
	//editRenderLayerAdjustment "miDefaultOptions.minSamples";
	//setAttr "miDefaultOptions.minSamples" 0;
				
	//editRenderLayerAdjustment "miDefaultOptions.maxSamples";
	//setAttr "miDefaultOptions.maxSamples" 2;
	*/
	
	/*
	//selects all shading groups and assigns OB_black shader
	string $shadingGroups[] = `ls -type "shadingEngine"` ;
		
	for ($i = 0; $i < size ($shadingGroups); $i++){
		$shadingGroupSets = `sets -q $shadingGroups[$i]` ;
		select -r $shadingGroupSets ;
		sets -e -forceElement $frontdofSG;
		select -cl ;
	}
	*/

	//Version 3.0 Edit-->Create materials as a layer override rather than per object
	connectAttr -f ($frontdofSG +".message") ($frontDofLayer +".shadingGroupOverride");
		
	//replace the user selection for good form
	select -replace $userSelection;
		
	//V2.0 Edit
	//editRenderLayerGlobals -currentRenderLayer $userCurrentLayer;
	//V2.0 End Edit
		
	print "Front DOF pass created successfully!\r";		
}


