/**********************************************************************************************
Procedure: mh_setupAO()
Date: 12-17-09
Description: This procedure will setup the AO layer
**********************************************************************************************/

global proc mh_factorAO()
{
	//store the user selection to restore later
	string $userSelection[] = `ls -sl`;
	
	//store all the cameras--can't remember why
	string $allCameras[] = `ls -ca`;
	
	//V2.0 Edit
	//Retain current layer for animator
	//string $userCurrentLayer = `editRenderLayerGlobals -q -currentRenderLayer`;
	//V2.0 end
	
	//create AO render layer 	
	//create layer with -global flag which adds all objects--even future ones
	string $aoLayer = "defaultRenderLayer" ;
			
	//add the reardof render name as an override**removed due to renderlayer/renderlayer trick
	//editRenderLayerGlobals -currentRenderLayer $aoLayer ;
	
	//set AA and/or create mentalRayGlobals if not already created
	if (`objExists mentalrayGlobals`){		
		//editRenderLayerAdjustment "miDefaultOptions.finalGather" ;
		setAttr "miDefaultOptions.finalGather" 0 ;
				
		//turn on raytracing as overide so AO calculates
		//editRenderLayerAdjustment "miDefaultOptions.rayTracing";
		setAttr "miDefaultOptions.rayTracing" 1;
					
		//editRenderLayerAdjustment "miDefaultOptions.minSamples";
		setAttr "miDefaultOptions.minSamples" 0;
					
		//editRenderLayerAdjustment "miDefaultOptions.maxSamples";
		setAttr "miDefaultOptions.maxSamples" 2;
			
		//editRenderLayerAdjustment "miDefaultOptions.filter";
		setAttr miDefaultOptions.filter 3;
			
		setAttr "miDefaultOptions.jitter" 1;	
	}else{
		
		unifiedRenderGlobalsWindow;
		
	
		if ( `window -exists unifiedRenderGlobalsWindow` && `window -query -visible unifiedRenderGlobalsWindow` ){
			   print "globals window open\n" ; 
		   }else{
			   error "Please open the render globals window first\n"; 
		   }

		//initialize the mental ray variables
		string $tabLayoutName = "mentalRayTabLayout" ;
		string $qualityTab = "mentalRayQualityTab" ;
		int $selectedTab = `tabLayout -q -sti $tabLayoutName`;
		string $tabNames[] = `tabLayout -q -ca $tabLayoutName`;
		int $targetTab ;

		//grab the current tab for user replace later
		int $currentIndex = `tabLayout -q -sti $tabLayoutName`;
		
		//set Mental Ray as primary renderer
		string $renderercurrent = `getAttr defaultRenderGlobals.currentRenderer` ;
		string $mentalRay = "mentalRay" ;
		if ($renderercurrent != $mentalRay)
		{
			setAttr "defaultRenderGlobals.currentRenderer" -type "string" $mentalRay ;
		}

		//Mental ray quality tab grabber 2010
		for ($i = 0; $i < size ($tabNames); $i++){
			if ($tabNames[$i] == $qualityTab){
				$targetTab = $i ;
				}
		}	

		if (`objExists mentalrayGlobals`){
			print "mentalRay globals exist" ;
		}else{
			//hack to switch render globals frame to the quality tab forcing the MR nodes to be built
			tabLayout -e -sti $targetTab $tabLayoutName;
		}

		//set the AA settings are nodes are created
		//editRenderLayerAdjustment "miDefaultOptions.finalGather" ;
		setAttr "miDefaultOptions.finalGather" 0 ;
				
		//turn on raytracing as overide so AO calculates
		//editRenderLayerAdjustment "miDefaultOptions.rayTracing";
		setAttr "miDefaultOptions.rayTracing" 1;
					
		//editRenderLayerAdjustment "miDefaultOptions.minSamples";
		setAttr "miDefaultOptions.minSamples" 0;
					
		//editRenderLayerAdjustment "miDefaultOptions.maxSamples";
		setAttr "miDefaultOptions.maxSamples" 2;
			
		//editRenderLayerAdjustment "miDefaultOptions.filter";
		setAttr miDefaultOptions.filter 3;
			
		setAttr "miDefaultOptions.jitter" 1;
		
		//close da window
		window -e -vis 0 unifiedRenderGlobalsWindow;

	}
	
	//Turn on render all layers from the layering menu
	//optionVar -intValue renderViewRenderAllLayers 1;
	
	//Turn renderlayer options to "keep layers"
	//optionVar -intValue renderViewRenderLayersMode 2;	
		
	//V2.0 EDIT here
	for ($i = 0; $i < size ($allCameras); $i++){
		//editRenderLayerAdjustment ($allCameras[$i] + ".backgroundColor");
		setAttr ($allCameras[$i] + ".backgroundColor") -type double3 1 1 1 ;
		}		
	//END V2.0 EDIT
	
	//create AO shader
	$reardofShader = `shadingNode -asShader surfaceShader -n AO_Shader_00` ;
	$reardofSG = `sets -renderable true -noSurfaceShader true -empty -name ($reardofShader + "_SG")` ;
	connectAttr -f ($reardofShader + ".outColor") ($reardofSG + ".surfaceShader") ;
	print "RearDOF_surfaceShader created successfully.\r";
	
	//create AO mr node 
	string $aoShader = `createNode mib_amb_occlusion -n medley_ao_shader_00` ;

	setAttr ($aoShader + ".samples") 64 ;
		
	//make node connections regardless of dof planes
	connectAttr -f ($aoShader + ".outValue") ($reardofShader + ".outColor") ;

	//Version 3.0 Edit-->Create materials as a layer override rather than per object
	connectAttr -f ($reardofSG +".message") ($aoLayer +".shadingGroupOverride");
	
	/*	-->>>old ass code med -08-10-10
	//selects all shading groups and assigns OB_black shader		
	string $shadingGroups[] = `ls -type "shadingEngine"` ;
		
	for ($i = 0; $i < size ($shadingGroups); $i++){
		$shadingGroupSets = `sets -q $shadingGroups[$i]` ;
		select -r $shadingGroupSets ;
		sets -e -forceElement $reardofSG;
		select -cl ;
	}
	*/
		
	//replace the user selection for good form
	select -replace $userSelection;
		
	//V2.0 Edit
	//editRenderLayerGlobals -currentRenderLayer $userCurrentLayer;
	//V2.0 End Edit
		
	print "AO pass created successfully!\r";		
}


