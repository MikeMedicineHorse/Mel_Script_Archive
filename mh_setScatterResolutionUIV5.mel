/**********************************************************************************************
Procedure: mh_setScatterResolution()
Version: 1.0
Date: 08-11-10
Description: This procedure launches the UI for medley's tools




method: 

find textures
list connected expressions
disconnect attrs

UI: 

rename nodes
see selected textures 
logic for selected textures: 
ls -destination or -d == downstream
ls -source or -s == upstream

search -d
filter out mental ray globals and light maps
display results

NTH: 

merge mental ray textures
	allow multi select
	right mouse menu command
	prompt dialog check

	--find connected textures
	--use the first texture in the selection array
	--rename
	--re hook up attrs

**********************************************************************************************/

global proc mh_setScatterResolutionUIV5()
{

	//ititialize the window name variable
	$win = "mrScatterWin";
	$scrollList = "sssTsl" ;
	$mainForm = "medFormLayout" ;
	//only for TESTING!!!!!!
	$expCheck = 0 ;
	
	//check to see if the window or prefs exist then delete if so
	if (`window -exists $win`)
        deleteUI $win;
        
	if (`windowPref -exists $win`){
			windowPref -remove $win ;
	}   

	window
		-t "MR Texture Manager" 
		-wh 420 315 
		//maximize button
		-mxb 0 
		//window will always shrink to fit controls
		-rtf 0
		//sizeable
		-s 1
		$win ;

	formLayout $mainForm ;

	//content

	text -label "MR Textures:" mrText ;
	text -label "Shaders:" shaderText ;

	textScrollList -h 120 -ams 1 TSLtextures ;
	textScrollList -h 120 -ams 1 TSLshaders ;

	//----->initialize the first TSL
	//remove all items before refresh
	textScrollList -e -ra TSLtextures ;

	//nodeType `ls -sl` ; to query the selected node
	string $allSSS[] = `ls -type "mentalrayTexture"` ;

	//disconnectAttr ($sph[0] + ".r") ($con[0] + ".r");

	for ($eachTexture in $allSSS){
		textScrollList -edit -a $eachTexture -selectCommand "mh_populateShader" TSLtextures ;
		popupMenu -parent TSLtextures texturePop; 
		menuItem -l "rename" -c mh_tslRename ;
		menuItem -l "merge" -c mh_mergeMRtextures ;
		menuItem -l "select" -c mh_selectTexOutliner ;
		menuItem -l "Open AE" -c mh_selectTextureAE ;
		menuItem -l "delete" -c mh_deleteTexOutliner ;
	}

	textScrollList -e -selectIndexedItem 1 TSLtextures ;
	//-----> end initialize

	button -l "refresh" -c mh_grab refreshButton ; 
	button -l "open in AE window" -c mh_selectScatterShader selectShaderButton ;

	text -l ($expCheck + " expressions found") expressionText ;
	text -l "Filter Size Width:" FilterWidthText ;
	text -l "" filterWidthField ; 
	text -l "Filter Size Height:" FilterHeightText ;
	textField -text "" -ec mh_setFilterSize filterHeightField ;
	
	button -l "DeleteExpressions/Set Filter Size" -c mh_setFilterSize filterButton ;

	text -label "++Use RMB to access menus in the lists above++" helpText ;

	text -l "Lightmap Samples:" samplesText ;
	textField -text "" -ec mh_setSamples samplesTextField ;
	text -l "Scale Conversion:" scaleText ;
	textField -text "" -ec mh_setScale scaleTextField ;

	//popupMenu -parent helpText ;
	//menuItem -l "Help" ;

	formLayout -e
		-af mrText top 0 
		-af mrText left 5
		-ap mrText right 0 50
		
		-af shaderText top 0 
		-ac shaderText left 0 mrText
		-af shaderText right 0 

		-af TSLtextures left 5 
		-ac TSLtextures top 0 shaderText
		-ap TSLtextures right 0 45

		-ac TSLshaders left 2 TSLtextures
		-ac TSLshaders top 0 shaderText
		-aoc TSLshaders bottom 0 TSLtextures
		-af TSLshaders right 0

		-af refreshButton left 5
		-ac refreshButton top 2 TSLtextures 
		-ap refreshButton right 0 45

		-ac selectShaderButton left 2 refreshButton
		-ac selectShaderButton top 2 TSLshaders
		-af selectShaderButton  right 0 
		-aoc selectShaderButton bottom 0 refreshButton

		-af expressionText left 2 
		-ac expressionText top 5 refreshButton
		-ap expressionText right 0 45

		-ac samplesText left 5 expressionText
		-ac samplesText top 5 selectShaderButton
		-ap samplesText right 0 75

		-ac samplesTextField left 5 samplesText
		-ac samplesTextField top 5 selectShaderButton
		-ap samplesTextField right 0 95

		-ac scaleText left 5 filterWidthField
		-ac scaleText top 5 samplesText
		-ap scaleText right 0 75

		-ac scaleTextField left 5 scaleText
		-ac scaleTextField top 5 samplesTextField
		-ap scaleTextField right 0 95


		-af FilterWidthText left 2 
		-ac FilterWidthText top 5 expressionText
		-ap FilterWidthText right 0 24

		-ac filterWidthField left 2 FilterWidthText
		-ac filterWidthField top 5 expressionText
		-ap filterWidthField right 0 45

		-af FilterHeightText left 2 
		-ac FilterHeightText top 5 FilterWidthText
		-ap FilterHeightText right 0 24

		-ac filterHeightField left 2 FilterHeightText
		-ac filterHeightField top 2 filterWidthField
		-ap filterHeightField right 0 45

		-af filterButton left 2
		-ac filterButton top 2 FilterHeightText
		-ap filterButton right 0 45

		-af helpText left 25
		-ac helpText top 2 filterButton 
		
		$mainForm ;

	mh_populateShader ;
		
	showWindow $win ;	
}

global proc mh_grab()
{
	//remove all items before refresh
	textScrollList -e -ra TSLtextures ;

	//nodeType `ls -sl` ; to query the selected node
	string $allSSS[] = `ls -type "mentalrayTexture"` ;

	//disconnectAttr ($sph[0] + ".r") ($con[0] + ".r");

	for ($eachTexture in $allSSS){
		textScrollList -edit -a $eachTexture -selectCommand "mh_populateShader" TSLtextures ;
		popupMenu -parent TSLtextures texturePop; 
		menuItem -l "rename" -c mh_tslRename ;
		menuItem -l "merge" -c mh_mergeMRtextures ;
		menuItem -l "select" -c mh_selectTexOutliner ;
		menuItem -l "Open AE" -c mh_selectTextureAE ;
		menuItem -l "delete" -c mh_deleteTexOutliner ;
	}

	textScrollList -e -selectIndexedItem 1 TSLtextures ;

}


global proc mh_populateShader()
{
	//initialize the weed nodes variable
	//which will weed out the light maps
	//and the mental ray globas from the list
	string $weedNodes[] ;

	//remove all items first
	textScrollList -e -ra TSLshaders ;
	
	//grab the selected item from the TSL
	string $selectedTexture[] = `textScrollList -q -selectItem TSLtextures` ;

	//this grabs the selected nodes to the mental ray texture
	string $destObjects[] = sort (`listConnections -source 0 -d 1 -plugs 0 $selectedTexture`) ;


	//----->texture resolution related
	//grab the Width Attr for updating the UI
	string $textureWidth = `getAttr ($selectedTexture[0] + ".miWidth")` ;
	string $textureHeight = `getAttr ($selectedTexture[0] + ".miHeight")` ; 
	
	//text set
	text -e -l $textureWidth filterWidthField ;
	textField -e -text $textureHeight filterHeightField ; 

	//----->texture resolution end

	//----->expression Related
	//grab the connect expressions
	string $expressions[] = sort (`listConnections -source 1 -d 0 -plugs 0 $selectedTexture`) ;

	string $totalExp = size ($expressions) ;

	text -e -l ($totalExp + " expressions found") expressionText ;
	//----->expression end


	//for each object I weed out the light maps
	int $totalWeeds ;

	int $i= 0 ;

	for ($i=0; $i < size ($destObjects); $i++){
		string $type = `nodeType $destObjects[$i]` ;
		if ($type == "misss_fast_lmap_maya"){
			$totalWeeds = size ($weedNodes) ;
			$weedNodes[$totalWeeds] = $destObjects[$i] ; 
			}
		if ($type == "mentalrayGlobals"){
			$totalWeeds = size ($weedNodes) ;
			$weedNodes[$totalWeeds] = $destObjects[$i] ; 
			}
		}

	//weed out the objects from the variable for us in pupulating the list
	$destObjects = stringArrayRemove($weedNodes, $destObjects) ;
	
	//alphabatize the results
	$destObjects = sort($destObjects) ;

	if (size ($destObjects) == 0){
		textScrollList -e -a "<<Shader Not Found>>" TSLshaders ;
		}

	for ($eachDest in $destObjects){
		textScrollList -e -a $eachDest -selectCommand mh_updateSamples TSLshaders ;
		popupMenu -p TSLshaders shaderPOP ;
		menuItem -label "rename" -c "mh_tslRenameShader" ;
		menuItem -label "select" -c "mh_selectShader" ;
	}

}

global proc mh_tslRename() 
{ 
	//get the selected camera in the TSL
	string $selTextured[] = `textScrollList -q -selectItem TSLtextures` ;

	//grab all textures
	string $allTextures[] = `textScrollList -q -ai TSLtextures` ;

	//initialize the prompt dialog text variable
	string $text ; 
	string $renamed ;
	
	//the prompt dialog ui
	string $result = `promptDialog
				-title "Rename Object" 
				-message "Enter Name:" 
				-button "OK" -button "Cancel"
				-defaultButton "OK" -cancelButton "Cancel"
				-dismissString "Cancel"`;
	
	//if the OK button is pressed
	if ($result == "OK"){
		//query the text from the prompt dialog
		$text = `promptDialog -q -text` ;

		//renamed the node
		$renamed = `rename $selTextured[0] $text` ;

		//prepping the old named object for the array
		//key is it needs to be an array
		string $removed[1] = {$selTextured[0]} ;
		
		//remove the old (not named) texture from the list
		$allTextures = stringArrayRemove ($removed, $allTextures) ;
		
		//place the new object at the end of the list
		$allTextures[size($allTextures)] = $renamed ;
		
		//sort all the objects
		$allTextures = sort($allTextures) ;

		//repopulate the TSL
		//remove all objects
		textScrollList -e -ra TSLtextures ;

		//then we add everything back in 
		for ($at in $allTextures){
			textScrollList -e -a $at TSLtextures ; 
		}

		//finally we select the newly renamed camera
		textScrollList -e -si $renamed TSLtextures ;
	}
}

global proc mh_tslRenameShader() 
{ 
	//get the selected camera in the TSL
	string $selTextured[] = `textScrollList -q -selectItem TSLshaders` ;

	//grab all textures
	string $allTextures[] = `textScrollList -q -ai TSLshaders` ;

	//initialize the prompt dialog text variable
	string $text ; 
	string $renamed ;
	
	//the prompt dialog ui
	string $result = `promptDialog
				-title "Rename Object" 
				-message "Enter Name:" 
				-button "OK" -button "Cancel"
				-defaultButton "OK" -cancelButton "Cancel"
				-dismissString "Cancel"`;
	
	//if the OK button is pressed
	if ($result == "OK"){
		//query the text from the prompt dialog
		$text = `promptDialog -q -text` ;

		//renamed the node
		$renamed = `rename $selTextured[0] $text` ;
	}
	
	//prepping the old named object for the array
	//key is it needs to be an array
	string $removed[1] = {$selTextured[0]} ;
	
	//remove the old (not named) texture from the list
	$allTextures = stringArrayRemove ($removed, $allTextures) ;
	
	//place the new object at the end of the list
	$allTextures[size($allTextures)] = $renamed ;
	
	//sort all the objects
	$allTextures = sort($allTextures) ;

	//repopulate the TSL
	//remove all objects
	textScrollList -e -ra TSLshaders ;

	//then we add everything back in 
	for ($at in $allTextures){
		textScrollList -e -a $at TSLshaders ; 
	}

	//finally we select the newly renamed camera
	textScrollList -e -si $renamed TSLshaders ;

}

global proc mh_selectScatterShader(){
	string $selShader[] = `textScrollList -q -selectItem TSLshaders` ;
	select $selShader[0] ;
	openAEWindow ;
}

global proc mh_selectTextureAE(){
	string $selTex[] = `textScrollList -q -selectItem TSLtextures` ;
	select $selTex[0] ;
	openAEWindow ;
}

global proc mh_setFilterSize()
{
	//prepare the resolution variables
	float $resolutionWidth = `getAttr "defaultResolution.width"` ;
	float $resolutionHeight = `getAttr "defaultResolution.height"` ;


	//-->Expression Deletion
	//initialize the array for holding the incoming connections
	string $incomingConnections[];

	//get selected textures from the TSL
	string $selectedTexture[] = `textScrollList -q -selectItem TSLtextures` ;

	//query all the incoming connections
	$incomingConnections = `listConnections -source 1 -d 0 $selectedTexture` ;

	//for each connected object I weed out the expressions
	for ($node in $incomingConnections){
		string $type = `nodeType $node` ;
		if ($type == "expression"){
			delete $node ;
		}	
	}
	//----->expression delete end

	//----->set the resoution
	
	//calculate the pixel aspect ratio
	float $aspectRatio = ($resolutionWidth/$resolutionHeight) ;

	//grab the user height field
	float $userValue = `textField -q -text filterHeightField` ;
	float $userValueWidth = floor ((($userValue * $aspectRatio) * 2)) ;

	for ($eachTexture in $selectedTexture){
		setAttr ($eachTexture + ".miWidth") $userValueWidth ;
		setAttr ($eachTexture + ".miHeight") $userValue ;
	}
	
	$totalExp = 0 ;
	text -e -l ($totalExp + " expressions found") expressionText ;
	text -e -l $userValueWidth filterWidthField ;

}

global proc mh_selectTexOutliner(){
	//get selected textures from the TSL
	string $selectedTexture[] = `textScrollList -q -selectItem TSLtextures` ;

	select $selectedTexture ;
}


global proc mh_selectShader(){
	//get selected textures from the TSL
	string $selectedShader[] = `textScrollList -q -selectItem TSLshaders` ;

	select $selectedShader ;
}

global proc mh_deleteTexOutliner(){

	//get selected textures from the TSL
	string $selectedTexture[] = `textScrollList -q -selectItem TSLtextures` ;

	string $result = `confirmDialog
		-title "Delete MR texture"
		-message "Recommended to run only when no shaders are found. Are you sure?"
		-button "Yes"
		-button "No"
		-defaultButton "Yes"
		-cancelButton "No"
		-dismissString "No"`;

	if ($result == "Yes"){
		$totalDeleted = size ($selectedTexture) ;
		delete $selectedTexture ;
		
		print ($totalDeleted + " textures deleted.\n") ;
		mh_grab ;
	}
	
}

global proc mh_mergeMRtextures()
{
	//get selected textures from the TSL
	string $selectedTexture[] = `textScrollList -q -selectItem TSLtextures` ;
	
	//initialize the incoming connections array variable
	string $incomings[] ;

	if (size ($selectedTexture) == 0){
		error "Please select more than one object to merge.\n";
	}
	
	//here I'm rerouting all the connections to the first selection in the array
	for ($i = 1; $i < size ($selectedTexture); $i++){
		//first I grab the connections one object at a time
		$incomingConnections = `listConnections -source 0 -d 1 -plugs 1 $selectedTexture[$i]` ;
		//for each connection I reconnect to the first item in the selection array
		for ($eachDownstream in $incomingConnections){
			connectAttr -f ($selectedTexture[0] + ".message") $eachDownstream ;
		}
		//then when all is said and done I delete the unused texture
		delete $selectedTexture[$i];
	}

	//initialize the prompt dialog text variable
	string $text ; 
	string $renamed ;
	
	//the prompt dialog ui
	string $result = `promptDialog
				-title "Rename Object" 
				-message "Enter Name:" 
				-button "OK" -button "Cancel"
				-defaultButton "OK" -cancelButton "Cancel"
				-dismissString "Cancel" `;
	
	//if the OK button is pressed
	if ($result == "OK"){
		//query the text from the prompt dialog
		$text = `promptDialog -q -text` ;

		//renamed the node
		$renamed = `rename $selectedTexture[0] $text` ;
	}else{
		$renamed = `rename $selectedTexture[0] "MergedTexture"` ;
	}

	mh_grab ;		
}

global proc mh_updateSamples()
{
	//get selected textures from the TSL
	string $selectedShaders[] = `textScrollList -q -selectItem TSLshaders` ;

	string $samples = `getAttr ($selectedShaders[0] + ".samples")` ;
	string $scale = `getAttr ($selectedShaders[0] + ".scale_conversion")` ;
	
	textField -e -text $scale scaleTextField ;
	textField -e -text $samples samplesTextField ;

}

global proc mh_setSamples()
{
	//get selected textures from the TSL
	string $selectedShaders[] = `textScrollList -q -selectItem TSLshaders` ;
	
	int $newSamples = `textField -q -text samplesTextField`;

	for ($eachShader in $selectedShaders){
		setAttr ($eachShader + ".samples") $newSamples ;
	}
}

global proc mh_setScale()
{
	//get selected textures from the TSL
	string $selectedShaders[] = `textScrollList -q -selectItem TSLshaders` ;
	
	int $newScale = `textField -q -text scaleTextField`;

	for ($eachShader in $selectedShaders){
		setAttr ($eachShader + ".scale_conversion") $newScale ;
	}
}




		






