/**********************************************************************************************
Procedure: mh_createViewCamTarget{)
Version: 1.0
Date: 05-11-09
Description: This procedure creates a target camera from the current view
**********************************************************************************************/


global proc mh_createViewCamTarget()
{
	//user selection
	string $userSelection[] = `ls -sl` ;
	
	select -cl ;
	
	//first we grab the current view camera
	//declare the variable
	string $viewCamera;

	// First get the panel that currently has focus
	string $panel = `getPanel -wf`;

	// Compare the panel's type to confirm it is a "modelPanel"
	if ( "modelPanel" == `getPanel -to $panel` ){
		// Get the name of the camera using the ‘modelEditor’ command
		$viewCamera = `modelEditor -q -camera $panel`;
  	}else{
	  	error "please have view panel active" ;
  	}
	
	//remember to make rotates non keyable
	
	string $newCamera[] = `camera -coi 5 -lsr 1 -cs 1 -hfa 1.41732 -vfa 0.94488 -mb 0 -sa 144 -o 0 -ow 30 -n "med_cam_00" ` ;
	
	//set the rotates to non keyable so no blend node is created when keyframes are made				
	setAttr -keyable false -channelBox true ($newCamera[0] + ".rx");
	setAttr -keyable false -channelBox true ($newCamera[0] + ".ry");
	setAttr -keyable false -channelBox true ($newCamera[0] + ".rz");
	
	  	
  	//grab the view camera attrs	
  	//declare the shape variable
	string $shapes[];
	
	$shapes[0] = $viewCamera ;

	if ( "transform" == `nodeType $viewCamera` )
	// If given node is not a transform, assume it is a shape
	// and pass it through
	{
		$shapes = `listRelatives -fullPath -shapes $viewCamera`;
	}
	
	string $attrList[] ;
	$attrList = `listAttr -w -s -k $shapes[0]` ;
	
	for ($i = 0; $i < size ($attrList); $i++){
		connectAttr -f ($shapes[0] + "." + $attrList[$i]) ($newCamera[1] + "." + $attrList[$i]) ;
		disconnectAttr ($shapes[0] + "." + $attrList[$i]) ($newCamera[1] + "." + $attrList[$i]) ;
		}
		
	//manually grab a few attrs that help with consistency
	$currentFilmFit = `getAttr ($viewCamera + ".filmFit")` ;
	setAttr ($newCamera[1] + ".filmFit") $currentFilmFit ; 
	
	$currentfarClipPlane = `getAttr ($viewCamera + ".farClipPlane")` ;
	setAttr ($newCamera[1] + ".farClipPlane") $currentfarClipPlane ; 
	
	$currentnearClipPlane = `getAttr ($viewCamera + ".nearClipPlane")` ;
	setAttr ($newCamera[1] + ".nearClipPlane") $currentnearClipPlane ; 
	
	$currentoverscan = `getAttr ($viewCamera + ".overscan")` ;
	setAttr ($newCamera[1] + ".overscan") $currentoverscan ; 
	
	$currentdisplayResolution = `getAttr ($viewCamera + ".displayResolution")` ;
	setAttr ($newCamera[1] + ".displayResolution") $currentdisplayResolution ; 

	
  	//select the objects for constraining
  	select -r $viewCamera ; 
  	pickWalk -d up ;
  	select -add $newCamera[0] ;
  	
	//snap the new camera to the current camera
	mh_centerToObject ;
	
	//create a temp group to align all our new objects
	$tempGroup = `group -em -n tempGroup` ;
	
	//select the objects for constraining
	select -r $newCamera[0] ; 
	select -add $tempGroup ; 
	
	//snap the new group to the new camera
	mh_centerToObject ;
	
	$targetLocator = `spaceLocator -n ($newCamera[0] + "_targetLocator")` ;
	
	select -r $tempGroup ; 
	select -add $targetLocator ;
	
	//snap the new group to the new camera
	mh_centerToObject ;	
	
	//group the objects under the temp null to add the necessary offsets
	select -r $targetLocator ; 
	select -add $tempGroup ;
	parent ; 
	
	//add the offsets so the constraint doesnt change the view
	setAttr ($targetLocator[0] + ".translateZ") -10 ;
	
	//unparent the objects
	select -r $targetLocator ; 
	parent -w ;
	
	//select objects for constaining
	select -r $targetLocator ; 
	select -add $newCamera[0] ; 
	
	string $aimConst[] = `aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 -1 -upVector 0 1 0 ` ;
	
	$cameraGroup = `group -em -n ($newCamera[0] + "_grp_00")` ;
	
	select -r $newCamera[0] ; 
	select -add $targetLocator ; 
	select -add $cameraGroup ; 
	
	parent ; 
	
	delete $tempGroup ; 
	
	//forced selection of the new camera
	select -r $newCamera[0] ;
	
	//this looks through the current view with the new camera
	string $panel = `getPanel -withFocus`;
		if (`getPanel -typeOf $panel` == "modelPanel"){
			lookThroughSelected 0 $panel;			
		} else {
			warning((uiRes("NotAModelingPanel")));
		}

	select -r $userSelection ;
	
	print ("Camera Setup Complete." + " " + $newCamera[1] + " is active.\r")  ;
	
}
	
	
	
	
